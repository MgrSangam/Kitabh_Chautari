@page "/bookdetails/{BookId:int}"
@inject NavigationManager NavigationManager
@using KitabhChautari.Models
@using KitabhChautari.Services
@using KitabhChautari.IServices
@inject IJSRuntime JSRuntime
@inject IBookService BookService

<!-- Main Content -->
<div class="mainContainer">
    <!-- Book Details Section -->
    @if (selectedBook == null)
    {
        <p>Loading book details...</p>
    }
    else if (selectedBookError)
    {
        <p>Error: Book not found or an error occurred.</p>
    }
    else
    {
        <div class="book-details-container">
            <div class="book-image">
                <img src="@selectedBook.CoverImageUrl" alt="@selectedBook.Title" />
            </div>
            <div class="book-info">
                <h1 class="book-title">@selectedBook.Title</h1>
                <p class="book-author">by @(selectedBook.AuthorName ?? "Unknown Author")</p>
                <div class="quantity-selector">
                    <label>Quantity:</label>
                    <button class="quantity-btn" @onclick="DecreaseQuantity">-</button>
                    <span>@quantity</span>
                    <button class="quantity-btn" @onclick="IncreaseQuantity">+</button>
                </div>
                <div class="price-section">
                    @if (selectedBook.IsOnSale && selectedBook.DiscountPercentage.HasValue)
                    {
                        var discountedPrice = selectedBook.Price * (1 - selectedBook.DiscountPercentage.Value);
                        <span class="book-price">NRP @discountedPrice.ToString("N0")</span>
                        <span class="original-price">NRP @selectedBook.Price.ToString("N0")</span>
                    }
                    else
                    {
                        <span class="book-price">NRP @selectedBook.Price.ToString("N0")</span>
                    }
                </div>
                <div class="action-buttons">
                    <button class="add-to-cart" @onclick="AddToCart">Add To Cart</button>
                    <button class="buy-now" @onclick="BuyNow">Buy Now</button>
                    <button class="add-to-wishlist" @onclick="AddToWishlist">Add To Wishlist</button>
                </div>
            </div>
        </div>

        <!-- Description and Specifications Section -->
        <div class="desc-spec-container">
            <div class="description-section">
                <h2>Description</h2>
                <p>@(selectedBook.Synopsis ?? "No description available.")</p>
            </div>
            <div class="specifications-section">
                <h2>Specifications</h2>
                <ul>
                    <li>ISBN: @selectedBook.ISBN</li>
                    <li>Pages: @selectedBook.Pages</li>
                    <li>Published: @selectedBook.PublishedDate.ToString("MMMM dd, yyyy")</li>
                    <li>Category: @(selectedBook.Category?.ToString() ?? "N/A")</li>
                    <li>Stock: @(selectedBook.StockCount > 0 ? selectedBook.StockCount.ToString() : "Out of stock")</li>
                </ul>
            </div>
        </div>

        <!-- Author Section -->
        <div class="author-section">
            <h2>Author</h2>
            <p>@(selectedBook.AuthorName ?? "Unknown Author")</p>
            <!-- Add more author details if available via a separate API call -->
        </div>
    }

    <!-- You Might Also Like Section -->
    <div class="secContainer">
        <div class="section-header">
            <h2>You Might Also Like</h2>
            <a href="#" class="view-all">View All</a>
        </div>

        <div class="products-grid">
            @if (relatedBooks == null)
            {
                <p>Loading related books...</p>
            }
            else if (!relatedBooks.Any())
            {
                <p>No related books available.</p>
            }
            else
            {
                @foreach (var book in relatedBooks)
                {
                    <NavLink href="@($"/bookdetails/{book.BookId}")" class="productCard">
                        <img src="@book.CoverImageUrl" alt="@book.Title" />
                        <h3 class="book-title">@book.Title</h3>
                        <p class="book-author">@(book.AuthorName ?? "Unknown Author")</p>
                        <span class="book-price">NRP @book.Price.ToString("N0")</span>
                        <button class="add-to-cart" @onclick="() => AddToCartRelated(book.Title)">Add To Cart</button>
                    </NavLink>
                }
            }
        </div>
    </div>

    <!-- Footer -->
    <div class="footer-grid">
        <div class="footerCard">
            <h3 class="footer-title">About Us</h3>
            <p class="infoName">Debit Gurung</p>
            <p class="infoName">Tuphan Gurung</p>
            <p class="infoName">Sangam Thapa</p>
            <p class="infoName">Sujal Gurung</p>
        </div>
        <div class="footerCard">
            <h3 class="footer-title">Contact Us</h3>
            <p class="contact-title">kitab@gmail.com</p>
        </div>
        <div class="footerCard">
            <h3 class="footer-title">Join Us On</h3>
            <span class="bi bi-facebook"></span>
            <span class="bi bi-instagram"></span>
            <span class="bi bi-tiktok"></span>
            <span class="bi bi-twitter-x"></span>
        </div>
    </div>
</div>

<!-- Notification -->
<div class="notification" id="notification" style="display: none;"></div>

<style>
    .mainContainer {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        margin-top: 60px;
    }

    /* Book Details Section */
    .book-details-container {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 30px;
        margin-bottom: 40px;
    }

    .book-image img {
        width: 100%;
        height: 500px;
        object-fit: cover;
        border-radius: 8px;
    }

    .book-info {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .book-info .book-title {
        font-size: 2rem;
        margin: 0;
        color: #333;
    }

    .book-info .book-author {
        font-size: 1.2rem;
        color: #666;
        margin: 0;
    }

    .quantity-selector {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .quantity-selector label {
        font-size: 1rem;
        color: #555;
    }

    .quantity-btn {
        width: 30px;
        height: 30px;
        background-color: #f5f5f5;
        border: 1px solid #ddd;
        border-radius: 4px;
        cursor: pointer;
        font-size: 1rem;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .quantity-btn:hover {
        background-color: #e0e0e0;
    }

    .quantity-selector span {
        min-width: 20px;
        text-align: center;
        font-size: 1rem;
    }

    .price-section {
        display: flex;
        align-items: center;
        gap: 20px;
    }

    .book-price {
        font-size: 1.5rem;
        font-weight: bold;
        color: #333;
    }

    .original-price {
        font-size: 1.2rem;
        color: #666;
        text-decoration: line-through;
    }

    .action-buttons {
        display: flex;
        gap: 15px;
    }

    .add-to-cart, .buy-now, .add-to-wishlist {
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 500;
        font-size: 1rem;
        color: white;
    }

    .add-to-cart {
        background-color: #4CAF50;
    }

    .add-to-cart:hover {
        background-color: #45a049;
    }

    .buy-now {
        background-color: #ff6200;
    }

    .buy-now:hover {
        background-color: #e55b00;
    }

    .add-to-wishlist {
        background-color: #0066cc;
    }

    .add-to-wishlist:hover {
        background-color: #005bb5;
    }

    /* Description and Specifications Sections */
    .desc-spec-container {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 30px;
        margin-bottom: 40px;
    }

    .description-section h2, .specifications-section h2, .author-section h2 {
        font-size: 1.5rem;
        margin-bottom: 15px;
        color: #333;
    }

    .description-section p, .author-section p {
        color: #666;
        line-height: 1.6;
    }

    .specifications-section ul {
        list-style-type: disc;
        padding-left: 20px;
        color: #666;
    }

    .specifications-section li {
        margin-bottom: 10px;
    }

    /* Author Section */
    .author-section {
        margin-bottom: 40px;
    }

    /* You Might Also Like Section */
    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin: 30px 0 20px 0;
    }

    .view-all {
        color: #0066cc;
        text-decoration: none;
        font-weight: 500;
    }

    .products-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 20px;
    }

    .productCard {
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 15px;
        transition: transform 0.3s ease;
        text-decoration: none;
        color: inherit;
    }

    .productCard:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .productCard img {
        width: 100%;
        height: 300px;
        object-fit: cover;
        border-radius: 4px;
    }

    .productCard .book-title {
        font-size: 1.1rem;
        margin: 10px 0 5px 0;
    }

    .productCard .book-author {
        color: #666;
        font-size: 0.9rem;
        margin: 0 0 10px 0;
    }

    .productCard .book-price {
        font-weight: bold;
        color: #333;
        display: block;
        margin-bottom: 15px;
    }

    /* Footer */
    .footer-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 30px;
        margin-top: 50px;
        padding: 30px 0;
        border-top: 1px solid #e0e0e0;
    }

    .footer-title {
        font-size: 1.2rem;
        margin-bottom: 15px;
        color: #333;
    }

    .infoName, .contact-title {
        margin: 5px 0;
        color: #666;
    }

    .bi {
        font-size: 1.5rem;
        margin-right: 15px;
        color: #555;
        cursor: pointer;
    }

    .bi:hover {
        color: #0066cc;
    }

    .notification {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background-color: #4CAF50;
        color: white;
        padding: 15px;
        border-radius: 4px;
        z-index: 1000;
        display: none;
    }
</style>

<script>
    function showNotification(message) {
        const notification = document.getElementById('notification');
        notification.textContent = message;
        notification.style.display = 'block';
        setTimeout(() => {
            notification.style.display = 'none';
        }, 3000);
    }
</script>

@code {
    [Parameter]
    public int BookId { get; set; }

    private BookDto? selectedBook;
    private IEnumerable<BookDto>? relatedBooks;
    private bool selectedBookError = false;
    private int quantity = 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch the selected book
            selectedBook = await BookService.GetBookByIdAsync(BookId);
            if (selectedBook == null)
            {
                selectedBookError = true;
                await JSRuntime.InvokeVoidAsync("showNotification", "Book not found!");
                return;
            }

            // Fetch related books (e.g., same genre or category)
            var allBooks = await BookService.GetAllBooksAsync();
            relatedBooks = allBooks
                .Where(b => b.BookId != BookId && // Exclude the current book
                            (b.Genre_id == selectedBook.Genre_id || b.Category == selectedBook.Category))
                .Take(4); // Limit to 4 related books
        }
        catch (Exception ex)
        {
            selectedBookError = true;
            await JSRuntime.InvokeVoidAsync("showNotification", $"Error loading book details: {ex.Message}");
        }
    }

    private void IncreaseQuantity()
    {
        if (selectedBook != null && quantity < selectedBook.StockCount)
        {
            quantity++;
        }
    }

    private void DecreaseQuantity()
    {
        if (quantity > 1)
        {
            quantity--;
        }
    }

    private async Task AddToCart()
    {
        if (selectedBook == null) return;
        await JSRuntime.InvokeVoidAsync("showNotification", $"{selectedBook.Title} (x{quantity}) added to cart successfully!");
        NavigationManager.NavigateTo("/cart");
    }

    private async Task BuyNow()
    {
        if (selectedBook == null) return;
        await JSRuntime.InvokeVoidAsync("showNotification", $"Proceeding to order for {selectedBook.Title} (x{quantity})!");
        NavigationManager.NavigateTo("/order");
    }

    private async Task AddToWishlist()
    {
        if (selectedBook == null) return;
        await JSRuntime.InvokeVoidAsync("showNotification", $"{selectedBook.Title} added to wishlist!");
    }

    private async Task AddToCartRelated(string bookTitle)
    {
        await JSRuntime.InvokeVoidAsync("showNotification", $"{bookTitle} added to cart successfully!");
        NavigationManager.NavigateTo("/cart");
    }
}