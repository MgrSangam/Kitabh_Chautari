@page "/admin/addauthor"
@using System.ComponentModel.DataAnnotations
@using Kitabh_Chautari.Components.Layout
@layout AdminLayout
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="mainContainer">
    <h1>Add New Author</h1>
    <div class="add-author-container">
        <EditForm Model="@author" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="name">Author Name:</label>
                <InputText id="name" @bind-Value="author.Name" class="form-input" />
                <ValidationMessage For="@(() => author.Name)" />
            </div>

            <div class="action-buttons">
                <button type="submit" class="submit-btn">Add Author</button>
                <button type="button" class="cancel-btn" @onclick="Cancel">Cancel</button>
            </div>
        </EditForm>
    </div>
</div>

<!-- Notification -->
<div class="notification" id="notification" style="display: none;"></div>

<style>
    .mainContainer {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        margin-top: 20px; /* Adjusted to avoid overlapping with navbar */
    }

    h1 {
        font-size: 2rem;
        color: #333;
        margin-bottom: 30px;
    }

    .add-author-container {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        background-color: #fff;
    }

    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            display: block;
            font-size: 1rem;
            color: #555;
            margin-bottom: 5px;
        }

    .form-input {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 1rem;
    }

        .form-input:focus {
            outline: none;
            border-color: #4CAF50;
            box-shadow: 0 0 5px rgba(76, 175, 80, 0.3);
        }

    .action-buttons {
        display: flex;
        gap: 15px;
        margin-top: 20px;
    }

    .submit-btn, .cancel-btn {
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 500;
        font-size: 1rem;
        color: white;
    }

    .submit-btn {
        background-color: #4CAF50;
    }

        .submit-btn:hover {
            background-color: #45a049;
        }

    .cancel-btn {
        background-color: #666;
    }

        .cancel-btn:hover {
            background-color: #555;
        }

    .notification {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background-color: #4CAF50;
        color: white;
        padding: 15px;
        border-radius: 4px;
        z-index: 1000;
        display: none;
    }
</style>

<script>
    function showNotification(message) {
        const notification = document.getElementById('notification');
        notification.textContent = message;
        notification.style.display = 'block';
        setTimeout(() => {
            notification.style.display = 'none';
        }, 3000);
    }
</script>

@code {
    private Author author = new Author { BookAuthors = new List<BookAuthor>() };

    private async Task HandleValidSubmit()
    {
        // Generate a new ID (simple increment for demo purposes)
        author.AuthorId = SharedAuthorData.Authors.Any() ? SharedAuthorData.Authors.Max(a => a.AuthorId) + 1 : 1;

        // Add the new author to the shared list
        SharedAuthorData.Authors.Add(author);

        await JSRuntime.InvokeVoidAsync("showNotification", $"{author.Name} added successfully!");

        // Reset the form
        author = new Author { BookAuthors = new List<BookAuthor>() };

        // Navigate back to the authors list
        NavigationManager.NavigateTo("/admin/authors");
    }

    private void Cancel()
    {
        // Reset the form and navigate back
        author = new Author { BookAuthors = new List<BookAuthor>() };
        NavigationManager.NavigateTo("/admin/authors");
    }

    public class Author
    {
        public int AuthorId { get; set; }

        [Required(ErrorMessage = "Author name is required")]
        [StringLength(100, ErrorMessage = "Name cannot exceed 100 characters")]
        public string Name { get; set; } = string.Empty;

        public ICollection<BookAuthor> BookAuthors { get; set; }
    }

    // Placeholder for BookAuthor class
    public class BookAuthor
    {
        public int BookId { get; set; }
        public int AuthorId { get; set; }
    }

    // Static class to share author data (for demo purposes)
    public static class SharedAuthorData
    {
        public static List<Author> Authors { get; set; } = new List<Author>
        {
            new Author { AuthorId = 1, Name = "Oscar Wilde", BookAuthors = new List<BookAuthor>() },
            new Author { AuthorId = 2, Name = "Jane Austen", BookAuthors = new List<BookAuthor>() },
            new Author { AuthorId = 3, Name = "Walter Scott", BookAuthors = new List<BookAuthor>() },
            new Author { AuthorId = 4, Name = "Arthur Miller", BookAuthors = new List<BookAuthor>() }
        };
    }
}