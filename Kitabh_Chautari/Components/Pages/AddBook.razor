@page "/admin/addbook"
@using KitabhChautari.Models
@using KitabhChautari.IServices
@using KitabhChautari.Enum
@using Kitabh_Chautari.Components.Layout
@using System.ComponentModel.DataAnnotations
@layout AdminLayout
@inject NavigationManager NavigationManager
@inject IBookService BookService
@inject HttpClient HttpClient
@using System.Text.Json
@using System.Text.Json.Serialization

<div class="main-container">
    <h1>Add New Book</h1>
    <div class="add-book-container">
        <EditForm Model="@newBook" FormName="AddBookForm" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="title">Title:</label>
                <InputText id="title" @bind-Value="newBook.Title" class="form-input" />
                <ValidationMessage For="@(() => newBook.Title)" />
            </div>
            <div class="form-group">
                <label for="isbn">ISBN:</label>
                <InputText id="isbn" @bind-Value="newBook.ISBN" class="form-input" />
                <ValidationMessage For="@(() => newBook.ISBN)" />
            </div>
            <div class="form-group">
                <label for="price">Price (NRP):</label>
                <InputNumber id="price" @bind-Value="newBook.Price" class="form-input" />
                <ValidationMessage For="@(() => newBook.Price)" />
            </div>
            <div class="form-group">
                <label for="publishedDate">Published Date:</label>
                <InputDate id="publishedDate" @bind-Value="newBook.PublishedDate" class="form-input" />
                <ValidationMessage For="@(() => newBook.PublishedDate)" />
            </div>
            <div class="form-group">
                <label for="pages">Pages:</label>
                <InputNumber id="pages" @bind-Value="newBook.Pages" class="form-input" />
                <ValidationMessage For="@(() => newBook.Pages)" />
            </div>
            <div class="form-group">
                <label for="stock">Stock:</label>
                <InputNumber id="stock" @bind-Value="newBook.StockCount" class="form-input" />
                <ValidationMessage For="@(() => newBook.StockCount)" />
            </div>
            <div class="form-group">
                <label for="synopsis">Synopsis:</label>
                <InputTextArea id="synopsis" @bind-Value="newBook.Synopsis" class="form-input" />
                <ValidationMessage For="@(() => newBook.Synopsis)" />
            </div>
            <div class="form-group">
                <label for="imageUrl">Image URL:</label>
                <InputText id="imageUrl" @bind-Value="newBook.CoverImageUrl" class="form-input" />
                <ValidationMessage For="@(() => newBook.CoverImageUrl)" />
            </div>
            <div class="form-group">
                <label for="isOnSale">Is On Sale:</label>
                <InputCheckbox id="isOnSale" @bind-Value="newBook.IsOnSale" class="form-checkbox" />
                <ValidationMessage For="@(() => newBook.IsOnSale)" />
            </div>
            <div class="form-group">
                <label for="discount">Discount (%):</label>
                <InputNumber id="discount" @bind-Value="discountPercentage" class="form-input" />
                <ValidationMessage For="@(() => discountPercentage)" />
            </div>
            <div class="form-group">
                <label for="category">Category:</label>
                <InputSelect id="category" @bind-Value="newBook.Category" class="form-input">
                    <option value="">Select Category</option>
                    @foreach (var category in Enum.GetValues(typeof(Category)))
                    {
                        <option value="@category">@category</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => newBook.Category)" />
            </div>
            <div class="form-group">
                <label for="authorId">Author:</label>
                <InputSelect id="authorId" @bind-Value="newBook.Author_id" class="form-input">
                    <option value="0">Select Author</option>
                    @if (authors != null)
                    {
                        @foreach (var author in authors)
                        {
                            <option value="@author.Id">@author.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => newBook.Author_id)" />
            </div>
            <div class="form-group">
                <label for="genreId">Genre:</label>
                <InputSelect id="genreId" @bind-Value="newBook.Genre_id" class="form-input">
                    <option value="0">Select Genre</option>
                    @if (genres != null)
                    {
                        @foreach (var genre in genres)
                        {
                            <option value="@genre.Id">@genre.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => newBook.Genre_id)" />
            </div>
            <div class="form-group">
                <label for="publisherId">Publisher:</label>
                <InputSelect id="publisherId" @bind-Value="newBook.Publisher_id" class="form-input">
                    <option value="0">Select Publisher</option>
                    @if (publishers != null)
                    {
                        @foreach (var publisher in publishers)
                        {
                            <option value="@publisher.Id">@publisher.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => newBook.Publisher_id)" />
            </div>
            <div class="action-buttons">
                <button type="submit" class="submit-btn">Add Book</button>
                <button type="button" class="cancel-btn" @onclick="Cancel">Cancel</button>
            </div>
        </EditForm>
    </div>
</div>

<!-- Notification -->
@if (!string.IsNullOrEmpty(notificationMessage))
{
    <div class="notification" style="display: block;">@notificationMessage</div>
}

<style>
    .main-container {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        margin-top: 20px;
    }

    h1 {
        font-size: 2rem;
        color: #333;
        margin-bottom: 20px;
    }

    .add-book-container {
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        margin-bottom: 30px;
        max-width: 600px;
        margin-left: auto;
        margin-right: auto;
    }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            display: block;
            font-weight: 500;
            color: #333;
            margin-bottom: 5px;
        }

    .form-input, .form-checkbox {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 0.95rem;
        color: #555;
    }

        .form-input:focus, .form-checkbox:focus {
            outline: none;
            border-color: #4CAF50;
            box-shadow: 0 0 5px rgba(76, 175, 80, 0.3);
        }

    textarea.form-input {
        resize: vertical;
        min-height: 100px;
    }

    .action-buttons {
        display: flex;
        gap: 10px;
    }

    .submit-btn {
        padding: 10px 20px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 500;
        transition: background-color 0.2s;
    }

        .submit-btn:hover {
            background-color: #45a049;
        }

    .cancel-btn {
        padding: 10px 20px;
        background-color: #f44336;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 500;
        transition: background-color 0.2s;
    }

        .cancel-btn:hover {
            background-color: #d32f2f;
        }

    .notification {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background-color: #4CAF50;
        color: white;
        padding: 15px;
        border-radius: 4px;
        z-index: 1000;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    }
</style>

@code {
    private BookDto newBook = new BookDto();
    private string notificationMessage = string.Empty;
    private decimal? discountPercentage;
    private List<AuthorDto> authors;
    private List<GenreDto> genres;
    private List<PublisherDto> publishers;

    protected override async Task OnInitializedAsync()
    {
        await LoadDropdownData();
    }

    private async Task LoadDropdownData()
    {
        try
        {
            var options = new JsonSerializerOptions
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                    Converters = { new JsonStringEnumConverter() }
                };
            authors = await HttpClient.GetFromJsonAsync<List<AuthorDto>>("api/authors", options) ?? new List<AuthorDto>();
            genres = await HttpClient.GetFromJsonAsync<List<GenreDto>>("api/genres", options) ?? new List<GenreDto>();
            publishers = await HttpClient.GetFromJsonAsync<List<PublisherDto>>("api/publishers", options) ?? new List<PublisherDto>();
        }
        catch (Exception ex)
        {
            notificationMessage = $"Failed to load dropdown data: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Convert discount percentage to decimal (e.g., 10% -> 0.10)
            newBook.DiscountPercentage = discountPercentage.HasValue ? discountPercentage.Value / 100 : null;

            await BookService.AddBookAsync(newBook);
            notificationMessage = $"{newBook.Title} added successfully!";
            newBook = new BookDto();
            discountPercentage = null;
            NavigationManager.NavigateTo("/admin/books");
        }
        catch (Exception ex)
        {
            notificationMessage = $"Failed to add book: {ex.Message}";
        }
    }

    private void Cancel()
    {
        newBook = new BookDto();
        discountPercentage = null;
        NavigationManager.NavigateTo("/admin/books");
    }

    // Placeholder DTOs for dropdowns (replace with actual models)
    public class AuthorDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    public class GenreDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    public class PublisherDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }
}