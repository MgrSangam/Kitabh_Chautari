@page "/browse"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Browse</h3>

<!-- Main Content -->
<div class="mainContainer">
    <!-- Filter and Books Layout -->
    <div class="browseContainer">
        <!-- Filter Section -->
        <div class="filterSection">
            <h4>Filters</h4>

            <!-- Genre Filter (Display Only) -->
            <div class="filterGroup">
                <label>Genre</label>
                <select>
                    <option value="">All</option>
                    @foreach (var genre in genres)
                    {
                        <option value="@genre">@genre</option>
                    }
                </select>
            </div>

            <!-- Author Filter (Display Only) -->
            <div class="filterGroup">
                <label>Author</label>
                <select>
                    <option value="">All</option>
                    @foreach (var author in authors)
                    {
                        <option value="@author">@author</option>
                    }
                </select>
            </div>

            <!-- Rating Filter (Display Only) -->
            <div class="filterGroup">
                <label>Rating</label>
                <select>
                    <option value="">All</option>
                    <option value="4">4+ Stars</option>
                    <option value="3">3+ Stars</option>
                    <option value="2">2+ Stars</option>
                </select>
            </div>

            <!-- Publisher Filter (Display Only) -->
            <div class="filterGroup">
                <label>Publisher</label>
                <select>
                    <option value="">All</option>
                    @foreach (var publisher in publishers)
                    {
                        <option value="@publisher">@publisher</option>
                    }
                </select>
            </div>
        </div>

        <!-- Books Section -->
        <div class="booksSection">
            <!-- Sort Options -->
            <div class="filterGroup">
                <label>Sort by</label>
                <select @onchange="e => SortBooks(e.Value.ToString())">
                    <option value="BestSellers">Best Sellers</option>
                    <option value="PriceLowToHigh">Price: Low to High</option>
                    <option value="PriceHighToLow">Price: High to Low</option>
                </select>
            </div>

            <div class="products-grid">
                @foreach (var book in filteredBooks)
                {
                    <NavLink href="@($"/bookdetails/{book.Id}")" class="productCard">
                        <img src="@book.ImageUrl" alt="@book.Title" />
                        <h3 class="book-title">@book.Title</h3>
                        <p class="book-author">@book.Author</p>
                        <span class="book-price">NRP @book.Price.ToString("N0")</span>
                    </NavLink>
                }
            </div>

            <!-- Pagination -->
            <div class="pagination">
                <button @onclick="PreviousPage" disabled="@(currentPage == 1)">Previous</button>
                <span>Page @currentPage of @totalPages</span>
                <button @onclick="NextPage" disabled="@(currentPage == totalPages)">Next</button>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <div class="footer-grid">
        <div class="footerCard">
            <h3 class="footer-title">About Us</h3>
            <p class="infoName">Debit Gurung</p>
            <p class="infoName">Tuphan Gurung</p>
            <p class="infoName">Sangam Thapa</p>
            <p class="infoName">Sujal Gurung</p>
        </div>
        <div class="footerCard">
            <h3 class="footer-title">Contact Us</h3>
            <p class="contact-title">kitab@gmail.com</p>
        </div>
        <div class="footerCard">
            <h3 class="footer-title">Join Us On</h3>
            <span class="bi bi-facebook"></span>
            <span class="bi bi-instagram"></span>
            <span class="bi bi-tiktok"></span>
            <span class="bi bi-twitter-x"></span>
        </div>
    </div>
</div>

<!-- Notification -->
<div class="notification" id="notification" style="display: none;"></div>

<style>
    .mainContainer {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        margin-top: 30px;
    }

    .browseContainer {
        display: flex;
        gap: 20px;
    }

    .filterSection {
        width: 250px;
        padding: 15px;
        border-right: 1px solid #e0e0e0;
    }

    .filterGroup {
        margin-bottom: 20px;
    }

        .filterGroup label {
            display: block;
            font-weight: 500;
            margin-bottom: 5px;
            color: #333;
        }

        .filterGroup select {
            width: 100%;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 0.9rem;
        }

    .booksSection {
        flex: 1;
    }

    .products-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 20px;
    }

    .productCard {
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 15px;
        transition: transform 0.3s ease;
        text-decoration: none;
        color: inherit;
    }

        .productCard:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .productCard img {
            width: 100%;
            height: 300px;
            object-fit: cover;
            border-radius: 4px;
        }

    .book-title {
        font-size: 1.1rem;
        margin: 10px 0 5px 0;
    }

    .book-author {
        color: #666;
        font-size: 0.9rem;
        margin: 0 0 10px 0;
    }

    .book-price {
        font-weight: bold;
        color: #333;
        display: block;
        margin-bottom: 15px;
    }

    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 20px;
        gap: 10px;
    }

        .pagination button {
            padding: 8px 16px;
            background-color: #0066cc;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

            .pagination button:disabled {
                background-color: #ccc;
                cursor: not-allowed;
            }

        .pagination span {
            font-size: 0.9rem;
            color: #333;
        }

    .footer-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 30px;
        margin-top: 50px;
        padding: 30px 0;
        border-top: 1px solid #e0e0e0;
    }

    .footer-title {
        font-size: 1.2rem;
        margin-bottom: 15px;
        color: #333;
    }

    .infoName, .contact-title {
        margin: 5px 0;
        color: #666;
    }

    .bi {
        font-size: 1.5rem;
        margin-right: 15px;
        color: #555;
        cursor: pointer;
    }

        .bi:hover {
            color: #0066cc;
        }

    .notification {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background-color: #4CAF50;
        color: white;
        padding: 15px;
        border-radius: 4px;
        z-index: 1000;
        display: none;
    }
</style>

<script>
    function showNotification(message) {
        const notification = document.getElementById('notification');
        notification.textContent = message;
        notification.style.display = 'block';
        setTimeout(() => {
            notification.style.display = 'none';
        }, 3000);
    }
</script>

@code {
    private List<Book> allBooks = new List<Book>
    {
        new Book { Id = 1, Title = "The Picture of Dorian Gray", Author = "Oscar Wilde", Price = 750, ImageUrl = "images/book1.jpg", Genre = "Fiction", Rating = 4.5m, Publisher = "Penguin" },
        new Book { Id = 2, Title = "Emma", Author = "Jane Austen", Price = 620, ImageUrl = "images/emma.jpg", Genre = "Romance", Rating = 4.0m, Publisher = "Oxford" },
        new Book { Id = 3, Title = "Ivanhoe", Author = "Walter Scott", Price = 680, ImageUrl = "images/scott.jpg", Genre = "Historical", Rating = 3.8m, Publisher = "Penguin" },
        new Book { Id = 4, Title = "Death of a Salesman", Author = "Arthur Miller", Price = 700, ImageUrl = "images/deathofsales.jpg", Genre = "Drama", Rating = 4.2m, Publisher = "Penguin" },
        new Book { Id = 5, Title = "A Little Life", Author = "Hanya Yanagihara", Price = 950, ImageUrl = "images/littlelife.jpg", Genre = "Fiction", Rating = 4.7m, Publisher = "Anchor" },
        new Book { Id = 6, Title = "Pride and Prejudice", Author = "Jane Austen", Price = 600, ImageUrl = "images/prideprejudice.jpg", Genre = "Romance", Rating = 4.5m, Publisher = "Oxford" },
        new Book { Id = 7, Title = "Persuasion", Author = "Jane Austen", Price = 580, ImageUrl = "images/persuasion.jpg", Genre = "Romance", Rating = 4.1m, Publisher = "Oxford" },
        new Book { Id = 8, Title = "Resurrection", Author = "Leo Tolstoy", Price = 820, ImageUrl = "images/resurrection.jpg", Genre = "Fiction", Rating = 4.0m, Publisher = "Penguin" }
    };

    private List<Book> filteredBooks = new List<Book>();
    private List<string> genres;
    private List<string> authors;
    private List<string> publishers;
    private Dictionary<string, string> activeFilters = new Dictionary<string, string>();
    private int currentPage = 1;
    private int pageSize = 6;
    private int totalPages => (int)Math.Ceiling((double)filteredBooks.Count / pageSize);
    private string searchQuery;

    protected override void OnInitialized()
    {
        genres = allBooks.Select(b => b.Genre).Distinct().ToList();
        authors = allBooks.Select(b => b.Author).Distinct().ToList();
        publishers = allBooks.Select(b => b.Publisher).Distinct().ToList();

        // Parse the query string directly
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryStrings = System.Web.HttpUtility.ParseQueryString(uri.Query);
        searchQuery = queryStrings["search"];

        ApplySearchAndPagination();
    }

    private void ApplySearchAndPagination()
    {
        filteredBooks = allBooks.ToList();

        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredBooks = filteredBooks.Where(b => b.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                                                    b.Author.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                                                    b.Genre.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        SortBooks("BestSellers"); // Default sort
        ApplyPagination();
    }

    private void SortBooks(string sortOption)
    {
        if (sortOption == "PriceLowToHigh")
        {
            filteredBooks = filteredBooks.OrderBy(b => b.Price).ToList();
        }
        else if (sortOption == "PriceHighToLow")
        {
            filteredBooks = filteredBooks.OrderByDescending(b => b.Price).ToList();
        }
        else
        {
            filteredBooks = filteredBooks.OrderByDescending(b => b.Rating).ToList();
        }

        ApplyPagination();
        StateHasChanged();
    }

    private void ApplyPagination()
    {
        filteredBooks = filteredBooks.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            ApplySearchAndPagination();
            StateHasChanged();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            ApplySearchAndPagination();
            StateHasChanged();
        }
    }

    private async Task AddToCart(string bookTitle)
    {
        await JSRuntime.InvokeVoidAsync("showNotification", $"{bookTitle} added to cart successfully!");
    }

    private class Book
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Author { get; set; }
        public decimal Price { get; set; }
        public string ImageUrl { get; set; }
        public string Genre { get; set; }
        public decimal Rating { get; set; }
        public string Publisher { get; set; }
    }
}