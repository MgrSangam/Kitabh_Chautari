@page "/browse"
@using KitabhChautari.Models
@using KitabhChautari.Enum
@using KitabhChautari.IServices
@using KitabhChautari.Services
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IBookService BookService
@inject HttpClient HttpClient

<h3>Browse Books</h3>

<!-- Main Content -->
<div class="mainContainer">
    <!-- Filter and Books Layout -->
    <div class="browseContainer">
        <!-- Filter Section -->
        <div class="filterSection">
            <h4>Filters</h4>

            <!-- Category Filter -->
            <div class="filterGroup">
                <label>Category</label>
                <select @onchange="e => FilterByCategory(e.Value.ToString())">
                    <option value="">All</option>
                    @foreach (var category in Enum.GetValues(typeof(Category)))
                    {
                        <option value="@category">@category</option>
                    }
                </select>
            </div>

            <!-- Genre Filter -->
            <div class="filterGroup">
                <label>Genre</label>
                <select @onchange="e => FilterByGenre(e.Value.ToString())">
                    <option value="">All</option>
                    @foreach (var genre in genres)
                    {
                        <option value="@genre.Genre_id">@genre.Genre_Name</option>
                    }
                </select>
            </div>

            <!-- Author Filter -->
            <div class="filterGroup">
                <label>Author</label>
                <select @onchange="e => FilterByAuthor(e.Value.ToString())">
                    <option value="">All</option>
                    @foreach (var author in authors)
                    {
                        <option value="@author.Author_id">@author.Author_Name</option>
                    }
                </select>
            </div>

            <!-- Rating Filter -->
            <div class="filterGroup">
                <label>Rating</label>
                <select @onchange="e => FilterByRating(e.Value.ToString())">
                    <option value="">All</option>
                    <option value="4">4+ Stars</option>
                    <option value="3">3+ Stars</option>
                    <option value="2">2+ Stars</option>
                </select>
            </div>
        </div>

        <!-- Books Section -->
        <div class="booksSection">
            <!-- Sort Options -->
            <div class="filterGroup">
                <label>Sort by</label>
                <select @onchange="e => SortBooks(e.Value.ToString())">
                    <option value="BestSellers">Best Sellers</option>
                    <option value="Latest">Latest Books</option>
                    <option value="PriceLowToHigh">Price: Low to High</option>
                    <option value="PriceHighToLow">Price: High to Low</option>
                </select>
            </div>

            <div class="products-grid">
                @if (isLoading)
                {
                    <div class="loading-message">Loading books...</div>
                }
                else if (!filteredBooks.Any())
                {
                    <div class="no-results">No books found matching your criteria</div>
                }
                else
                {
                    @foreach (var book in pagedBooks)
                    {
                        <NavLink href="@($"/bookdetails/{book.BookId}")" class="productCard">
                            <img src="@book.CoverImageUrl" alt="@book.Title" />
                            <h3 class="book-title">@book.Title</h3>
                            <p class="book-author">@book.AuthorName</p>
                            @if (book.IsOnSale && book.DiscountPercentage.HasValue)
                            {
                                <div class="price-container">
                                    <span class="original-price">NRP @book.Price.ToString("N0")</span>
                                    <span class="discounted-price">NRP @CalculateDiscountedPrice(book.Price, book.DiscountPercentage.Value).ToString("N0")</span>
                                    <span class="discount-badge">@((book.DiscountPercentage.Value * 100).ToString("N0"))% OFF</span>
                                </div>
                            }
                            else
                            {
                                <span class="book-price">NRP @book.Price.ToString("N0")</span>
                            }
                        </NavLink>
                    }
                }
            </div>

            <!-- Pagination -->
            @if (totalPages > 1)
            {
                <div class="pagination">
                    <button @onclick="PreviousPage" disabled="@(currentPage == 1)">Previous</button>
                    <span>Page @currentPage of @totalPages</span>
                    <button @onclick="NextPage" disabled="@(currentPage == totalPages)">Next</button>
                </div>
            }
        </div>
    </div>
</div>

<!-- Notification -->
<div class="notification" id="notification" style="display: none;"></div>

<style>
    .mainContainer {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        margin-top: 30px;
    }

    .browseContainer {
        display: flex;
        gap: 20px;
    }

    .filterSection {
        width: 250px;
        padding: 15px;
        border-right: 1px solid #e0e0e0;
    }

    .filterGroup {
        margin-bottom: 20px;
    }

        .filterGroup label {
            display: block;
            font-weight: 500;
            margin-bottom: 5px;
            color: #333;
        }

        .filterGroup select {
            width: 100%;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 0.9rem;
        }

    .booksSection {
        flex: 1;
    }

    .products-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 20px;
    }

    .productCard {
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 15px;
        transition: transform 0.3s ease;
        text-decoration: none;
        color: inherit;
    }

        .productCard:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .productCard img {
            width: 100%;
            height: 300px;
            object-fit: cover;
            border-radius: 4px;
        }

    .book-title {
        font-size: 1.1rem;
        margin: 10px 0 5px 0;
    }

    .book-author {
        color: #666;
        font-size: 0.9rem;
        margin: 0 0 10px 0;
    }

    .book-price, .discounted-price {
        font-weight: bold;
        color: #333;
        display: block;
        margin-bottom: 15px;
    }

    .price-container {
        position: relative;
    }

    .original-price {
        text-decoration: line-through;
        color: #999;
        font-size: 0.9rem;
    }

    .discount-badge {
        position: absolute;
        top: 0;
        right: 0;
        background-color: #ff5722;
        color: white;
        padding: 2px 6px;
        border-radius: 4px;
        font-size: 0.8rem;
    }

    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 20px;
        gap: 10px;
    }

        .pagination button {
            padding: 8px 16px;
            background-color: #0066cc;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

            .pagination button:disabled {
                background-color: #ccc;
                cursor: not-allowed;
            }

        .pagination span {
            font-size: 0.9rem;
            color: #333;
        }

    .loading-message, .no-results {
        grid-column: 1 / -1;
        text-align: center;
        padding: 40px;
        font-size: 1.2rem;
        color: #666;
    }

    .notification {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background-color: #4CAF50;
        color: white;
        padding: 15px;
        border-radius: 4px;
        z-index: 1000;
        display: none;
    }
</style>

@code {
    private List<BookDto> allBooks = new();
    private List<BookDto> filteredBooks = new();
    private List<BookDto> pagedBooks = new();
    private List<GenreDto> genres = new();
    private List<AuthorDto> authors = new();
    private string currentCategoryFilter = string.Empty;
    private string currentGenreFilter = string.Empty;
    private string currentAuthorFilter = string.Empty;
    private string currentRatingFilter = string.Empty;
    private string currentSortOption = "BestSellers";
    private int currentPage = 1;
    private int pageSize = 8;
    private int totalPages => (int)Math.Ceiling((double)filteredBooks.Count / pageSize);
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadGenres();
            await LoadAuthors();
            await LoadBooks();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            await ShowNotification($"Error loading books: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadBooks()
    {
        var queryParameters = new List<string>();
        if (!string.IsNullOrEmpty(currentCategoryFilter))
            queryParameters.Add($"category={Uri.EscapeDataString(currentCategoryFilter)}");
        if (!string.IsNullOrEmpty(currentGenreFilter) && int.TryParse(currentGenreFilter, out var genreId))
            queryParameters.Add($"genreId={genreId}");
        if (!string.IsNullOrEmpty(currentAuthorFilter) && int.TryParse(currentAuthorFilter, out var authorId))
            queryParameters.Add($"authorId={authorId}");

        var queryString = queryParameters.Any() ? $"?{string.Join("&", queryParameters)}" : "";
        var response = await HttpClient.GetFromJsonAsync<List<BookDto>>($"api/books{queryString}");
        allBooks = response ?? new List<BookDto>();
    }

    private async Task LoadGenres()
    {
        var response = await HttpClient.GetFromJsonAsync<List<GenreDto>>("api/genres");
        genres = response ?? new List<GenreDto>();
    }

    private async Task LoadAuthors()
    {
        var response = await HttpClient.GetFromJsonAsync<List<AuthorDto>>("api/authors");
        authors = response ?? new List<AuthorDto>();
    }

    private void FilterByCategory(string category)
    {
        currentCategoryFilter = category;
        currentPage = 1;
        isLoading = true;
        _ = LoadBooks().ContinueWith(t => ApplyFilters());
    }

    private void FilterByGenre(string genreId)
    {
        currentGenreFilter = genreId;
        currentPage = 1;
        isLoading = true;
        _ = LoadBooks().ContinueWith(t => ApplyFilters());
    }

    private void FilterByAuthor(string authorId)
    {
        currentAuthorFilter = authorId;
        currentPage = 1;
        isLoading = true;
        _ = LoadBooks().ContinueWith(t => ApplyFilters());
    }

    private void FilterByRating(string rating)
    {
        currentRatingFilter = rating;
        currentPage = 1;
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        filteredBooks = allBooks;

        if (!string.IsNullOrEmpty(currentRatingFilter) && decimal.TryParse(currentRatingFilter, out decimal minRating))
        {
            // Note: Add Rating property to BookDto if you want to filter by rating
            // filteredBooks = filteredBooks.Where(b => b.Rating >= minRating).ToList();
        }

        SortBooks(currentSortOption);
        isLoading = false;
        StateHasChanged();
    }

    private void SortBooks(string sortOption)
    {
        currentSortOption = sortOption;

        switch (sortOption)
        {
            case "PriceLowToHigh":
                filteredBooks = filteredBooks.OrderBy(b => b.Price).ToList();
                break;
            case "PriceHighToLow":
                filteredBooks = filteredBooks.OrderByDescending(b => b.Price).ToList();
                break;
            case "Latest":
                filteredBooks = filteredBooks.OrderByDescending(b => b.PublishedDate).ToList();
                break;
            case "BestSellers":
                // Note: Add SalesCount property to BookDto for best sellers
                filteredBooks = filteredBooks.OrderByDescending(b => b.PublishedDate).ToList(); // Placeholder
                break;
        }

        ApplyPagination();
    }

    private void ApplyPagination()
    {
        pagedBooks = filteredBooks
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            ApplyPagination();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            ApplyPagination();
        }
    }

    private decimal CalculateDiscountedPrice(decimal price, decimal discountPercentage)
    {
        return price * (1 - discountPercentage);
    }

    private async Task ShowNotification(string message)
    {
        await JSRuntime.InvokeVoidAsync("showNotification", message);
    }
}