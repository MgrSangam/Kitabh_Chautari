@page "/wishlist"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using KitabhChautari.IServices
@using Kitabh_Chautari.IServices
@using Kitabh_Chautari.Services
@inject IWishlistService WishlistService
@inject IBookService BookService

<h3>Wishlist</h3>

<!-- Main Content -->
<div class="mainContainer">
    <!-- Wishlist Layout -->
    <div class="wishlistContainer">
        @if (wishlistBooks == null)
        {
            <p>Loading wishlist...</p>
        }
        else if (wishlistBooks.Any())
        {
            <div class="products-grid">
                @foreach (var book in wishlistBooks)
                {
                    <div class="productCard">
                        <NavLink href="@($"/bookdetails/{book.BookId}")">
                            <img src="@book.CoverImageUrl" alt="@book.Title" />
                            <h3 class="book-title">@book.Title</h3>
                            <p class="book-author">@(book.AuthorName ?? "Unknown Author")</p>
                            <span class="book-price">NRP @book.Price.ToString("N0")</span>
                        </NavLink>
                        <button class="removeButton" @onclick="() => RemoveFromWishlist(book.WishlistItemId)">Remove</button>
                    </div>
                }
            </div>
        }
        else
        {
            <p>Your wishlist is empty. Start adding books!</p>
        }
    </div>

    <!-- Footer -->
    <div class="footer-grid">
        <div class="footerCard">
            <h3 class="footer-title">About Us</h3>
            <p class="infoName">Debit Gurung</p>
            <p class="infoName">Tuphan Gurung</p>
            <p class="infoName">Sangam Thapa</p>
            <p class="infoName">Sujal Gurung</p>
        </div>
        <div class="footerCard">
            <h3 class="footer-title">Contact Us</h3>
            <p class="contact-title">kitab@gmail.com</p>
        </div>
        <div class="footerCard">
            <h3 class="footer-title">Join Us On</h3>
            <span class="bi bi-facebook"></span>
            <span class="bi bi-instagram"></span>
            <span class="bi bi-tiktok"></span>
            <span class="bi bi-twitter-x"></span>
        </div>
    </div>
</div>

<!-- Notification -->
<div class="notification" id="notification" style="display: none;"></div>

<style>
    .mainContainer {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        margin-top: 30px;
    }

    .wishlistContainer {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .products-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 20px;
    }

    .productCard {
        position: relative;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 15px;
        transition: transform 0.3s ease;
        text-decoration: none;
        color: inherit;
    }

        .productCard:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .productCard img {
            width: 100%;
            height: 300px;
            object-fit: cover;
            border-radius: 4px;
        }

        .productCard a {
            text-decoration: none;
            color: inherit;
        }

    .book-title {
        font-size: 1.1rem;
        margin: 10px 0 5px 0;
    }

    .book-author {
        color: #666;
        font-size: 0.9rem;
        margin: 0 0 10px 0;
    }

    .book-price {
        font-weight: bold;
        color: #333;
        display: block;
        margin-bottom: 15px;
    }

    .removeButton {
        width: 100%;
        padding: 8px;
        background-color: #ff4444;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        margin-top: 10px;
    }

        .removeButton:hover {
            background-color: #cc0000;
        }

    .footer-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 30px;
        margin-top: 50px;
        padding: 30px 0;
        border-top: 1px solid #e0e0e0;
    }

    .footer-title {
        font-size: 1.2rem;
        margin-bottom: 15px;
        color: #333;
    }

    .infoName, .contact-title {
        margin: 5px 0;
        color: #666;
    }

    .bi {
        font-size: 1.5rem;
        margin-right: 15px;
        color: #555;
        cursor: pointer;
    }

        .bi:hover {
            color: #0066cc;
        }

    .notification {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background-color: #4CAF50;
        color: white;
        padding: 15px;
        border-radius: 4px;
        z-index: 1000;
        display: none;
    }
</style>

<script>
    function showNotification(message) {
        const notification = document.getElementById('notification');
        notification.textContent = message;
        notification.style.display = 'block';
        setTimeout(() => {
            notification.style.display = 'none';
        }, 3000);
    }
</script>

@code {
    private List<Book> wishlistBooks = new List<Book>();
    private int memberId = 1; // Hardcoded for demo; retrieve from authentication in a real app

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch wishlist from server
            var wishlist = await WishlistService.GetWishlistAsync(memberId);
            if (wishlist != null && wishlist.WishlistItems.Any())
            {
                // Fetch book details for each wishlist item
                wishlistBooks = new List<Book>();
                foreach (var item in wishlist.WishlistItems)
                {
                    var bookDto = await BookService.GetBookByIdAsync(item.BookId);
                    if (bookDto != null)
                    {
                        wishlistBooks.Add(new Book
                            {
                                WishlistItemId = item.WishlistItemId,
                                BookId = bookDto.BookId,
                                Title = bookDto.Title,
                                AuthorName = bookDto.AuthorName,
                                Price = bookDto.Price,
                                CoverImageUrl = bookDto.CoverImageUrl
                            });
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showNotification", $"Error loading wishlist: {ex.Message}");
        }
    }

    private async Task RemoveFromWishlist(int wishlistItemId)
    {
        try
        {
            await WishlistService.RemoveFromWishlistAsync(memberId, wishlistItemId);
            var book = wishlistBooks.FirstOrDefault(b => b.WishlistItemId == wishlistItemId);
            if (book != null)
            {
                wishlistBooks.Remove(book);
                await JSRuntime.InvokeVoidAsync("showNotification", $"{book.Title} removed from wishlist!");
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showNotification", $"Error removing from wishlist: {ex.Message}");
        }
    }

    private class Book
    {
        public int WishlistItemId { get; set; }
        public int BookId { get; set; }
        public string Title { get; set; }
        public string AuthorName { get; set; }
        public decimal Price { get; set; }
        public string CoverImageUrl { get; set; }
    }
}