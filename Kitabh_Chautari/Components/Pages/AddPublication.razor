@page "/admin/addpublisher"
@using KitabhChautari.Models
@using KitabhChautari.Services
@using KitabhChautari.IServices
@using System.ComponentModel.DataAnnotations
@using Kitabh_Chautari.Components.Layout
@layout AdminLayout
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IPublisherService PublisherService

<div class="main-container">
    <h1>Add New Publisher</h1>
    <div class="add-publisher-container">
        <EditForm Model="@publisher" FormName="AddPublisherForm" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="name">Publisher Name:</label>
                <InputText id="name" @bind-Value="publisher.Publisher_Name" class="form-input" />
                <ValidationMessage For="@(() => publisher.Publisher_Name)" />
            </div>

            <div class="action-buttons">
                <button type="submit" class="submit-btn">Add Publisher</button>
                <button type="button" class="cancel-btn" @onclick="Cancel">Cancel</button>
            </div>
        </EditForm>
    </div>

    <!-- Table of existing publishers -->
    <div class="publisher-list">
        <h2>Existing Publishers</h2>
        @if (existingPublishers == null)
        {
            <p>Loading publishers...</p>
        }
        else if (!existingPublishers.Any())
        {
            <p>No publishers found.</p>
        }
        else
        {
            <div class="table-wrapper">
                <table class="publishers-table">
                    <thead>
                        <tr>
                            <th scope="col">Publisher Name</th>
                            <th scope="col">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var p in existingPublishers)
                        {
                            <tr>
                                <td>@p.Publisher_Name</td>
                                <td>
                                    <button class="action-btn delete-btn"
                                            aria-label="Delete @p.Publisher_Name"
                                            @onclick="() => DeletePublisher(p.Publisher_id)">
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

<!-- Notification -->
@if (!string.IsNullOrEmpty(notificationMessage))
{
    <div class="notification" style="display: block;">@notificationMessage</div>
}

<style>
    .main-container {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        margin-top: 20px;
    }

    h1 {
        font-size: 2rem;
        color: #333;
        margin-bottom: 20px;
    }

    h2 {
        font-size: 1.5rem;
        color: #333;
        margin-bottom: 15px;
    }

    .add-publisher-container {
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        margin-bottom: 30px;
    }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            display: block;
            font-weight: 500;
            color: #333;
            margin-bottom: 5px;
        }

    .form-input {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 0.95rem;
        color: #555;
    }

        .form-input:focus {
            outline: none;
            border-color: #4CAF50;
            box-shadow: 0 0 5px rgba(76, 175, 80, 0.3);
        }

    .action-buttons {
        display: flex;
        gap: 10px;
    }

    .submit-btn {
        padding: 10px 20px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 500;
        transition: background-color 0.2s;
    }

        .submit-btn:hover {
            background-color: #45a049;
        }

    .cancel-btn {
        padding: 10px 20px;
        background-color: #f44336;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 500;
        transition: background-color 0.2s;
    }

        .cancel-btn:hover {
            background-color: #d32f2f;
        }

    .publisher-list {
        margin-top: 20px;
    }

    .table-wrapper {
        overflow-x: auto;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .publishers-table {
        width: 100%;
        border-collapse: collapse;
        background-color: #fff;
    }

        .publishers-table th,
        .publishers-table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #e0e0e0;
        }

        .publishers-table th {
            background-color: #f5f5f5;
            font-weight: 600;
            color: #333;
            text-transform: uppercase;
            font-size: 0.9rem;
            letter-spacing: 0.5px;
        }

        .publishers-table td {
            color: #555;
            font-size: 0.95rem;
        }

        .publishers-table tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        .publishers-table tr:hover {
            background-color: #f1f1f1;
        }

    .action-btn {
        padding: 6px 12px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 0.9rem;
        color: white;
        transition: background-color 0.2s;
    }

    .delete-btn {
        background-color: #f44336;
    }

        .delete-btn:hover {
            background-color: #d32f2f;
        }

    .notification {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background-color: #4CAF50;
        color: white;
        padding: 15px;
        border-radius: 4px;
        z-index: 1000;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    }
</style>

@code {
    private PublisherDto publisher = new PublisherDto();
    private List<PublisherDto> existingPublishers = new List<PublisherDto>();
    private string notificationMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadPublishers();
    }

    private async Task LoadPublishers()
    {
        try
        {
            var publishers = await PublisherService.GetAllPublishersAsync();
            existingPublishers = publishers.ToList();
        }
        catch (Exception ex)
        {
            notificationMessage = "Failed to load publishers: " + ex.Message;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await PublisherService.AddPublisherAsync(publisher);
            notificationMessage = $"{publisher.Publisher_Name} added successfully!";
            publisher = new PublisherDto();
            await LoadPublishers();
        }
        catch (Exception ex)
        {
            notificationMessage = $"Failed to add publisher: {ex.Message}";
        }
    }

    private async Task DeletePublisher(int publisherId)
    {
        try
        {
            await PublisherService.DeletePublisherAsync(publisherId);
            notificationMessage = "Publisher deleted successfully!";
            await LoadPublishers();
        }
        catch (Exception ex)
        {
            notificationMessage = $"Failed to delete publisher: {ex.Message}";
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/admin/publishers");
    }
}