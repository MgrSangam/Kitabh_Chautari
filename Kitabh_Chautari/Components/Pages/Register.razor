@page "/register"
@using System.ComponentModel.DataAnnotations

<div class="container">
    <div class="leftContainer">
        <!-- You can add an image or illustration here -->
    </div>

    <div class="rightContainer">
        <h1 class="heading1">Create Your Account</h1>

        @if (registrationSuccess)
        {
            <div class="alert alert-success">
                Registration successful! You have become a member.
            </div>
        }

        <EditForm Model="@registrationModel" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row">
                <div class="form-group">
                    <label for="email">Email Address</label>
                    <InputText @bind-Value="registrationModel.Email" id="email" class="form-control" />
                    <ValidationMessage For="@(() => registrationModel.Email)" />
                </div>

                <div class="form-group">
                    <label for="firstName">First Name</label>
                    <InputText @bind-Value="registrationModel.FirstName" id="firstName" class="form-control" />
                    <ValidationMessage For="@(() => registrationModel.FirstName)" />
                </div>

                <div class="form-group">
                    <label for="lastName">Last Name</label>
                    <InputText @bind-Value="registrationModel.LastName" id="lastName" class="form-control" />
                    <ValidationMessage For="@(() => registrationModel.LastName)" />
                </div>

                <div class="form-group">
                    <label for="userName">Username</label>
                    <InputText @bind-Value="registrationModel.UserName" id="userName" class="form-control" />
                    <ValidationMessage For="@(() => registrationModel.UserName)" />
                </div>

                <div class="form-group">
                    <label for="phone">Contact No</label>
                    <InputText @bind-Value="registrationModel.Phone" id="phone" class="form-control" />
                    <ValidationMessage For="@(() => registrationModel.Phone)" />
                </div>

                <div class="form-group">
                    <label for="password">Password</label>
                    <InputText type="password" @bind-Value="registrationModel.Password" id="password" class="form-control" />
                    <ValidationMessage For="@(() => registrationModel.Password)" />
                </div>

                <div class="form-group form-check">
                    <input type="checkbox" id="showPassword" class="form-check-input" @onchange="TogglePasswordVisibility" />
                    <label for="showPassword" class="form-check-label">Show Password</label>
                </div>

                <button type="submit" class="btn btn-primary">Register</button>

                <p class="terms">By creating an account, you have agreed to terms and conditions.</p>
                <p>Already have an account? <a href="/login">Log In</a></p>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private RegistrationModel registrationModel = new RegistrationModel();
    private bool registrationSuccess = false;
    private bool showPassword = false;

    private void TogglePasswordVisibility(ChangeEventArgs e)
    {
        showPassword = (bool)e.Value;
    }

    private void HandleRegistration()
    {
        // Here you would typically call your API to register the user
        // For demonstration, we'll just show the success message
        registrationSuccess = true;

        // Reset the form after successful registration
        registrationModel = new RegistrationModel();

        // Hide the success message after 5 seconds
        Task.Delay(5000).ContinueWith(_ =>
        {
            registrationSuccess = false;
            StateHasChanged();
        });
    }

    public class RegistrationModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "First name is required")]
        [StringLength(50, ErrorMessage = "First name cannot exceed 50 characters")]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Last name is required")]
        [StringLength(50, ErrorMessage = "Last name cannot exceed 50 characters")]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Username is required")]
        [StringLength(20, MinimumLength = 3, ErrorMessage = "Username must be between 3-20 characters")]
        public string UserName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Phone number is required")]
        [RegularExpression(@"^[0-9]{10,15}$", ErrorMessage = "Invalid phone number")]
        public string Phone { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; } = string.Empty;
    }
}